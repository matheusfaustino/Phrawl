#!/usr/bin/env php
<?php

use Phrawl\BaseCrawler;
use Phrawl\ProcessorPoolRequest;

/* @see https://github.com/sebastianbergmann/phpunit/blob/master/phpunit */
foreach ([__DIR__.'/../../autoload.php', __DIR__.'/../vendor/autoload.php', __DIR__.'/vendor/autoload.php'] as $file) {
    if (file_exists($file)) {
        define('PHRAWL_COMPOSER_INSTALL', $file);
        break;
    }
}

require PHRAWL_COMPOSER_INSTALL;

$line = '';
$isInlineClass = $argc === 1;
if ($isInlineClass) {
    /* @see https://stackoverflow.com/a/36494376/3618650 */
    $read = [STDIN];
    $write = $except = null;
    if (stream_select($read, $write, $except, 0) === 0) {
        /* @todo add a better help message */
        print 'You should pass a inline class as string or a file path to the script'.PHP_EOL;
        exit(1);
    }

    // read all line
    while ($f = fgets(STDIN)) {
        $line .= $f;
    }
} else {
    $line = $argv[1];
}

/* this really works, I tried BetterReflection but it was way too complicated and didn't work well (thanks Leandro ^^) - I'll probably try another way but for now, that is it */
$old = get_declared_classes();

$filePath = '';
if ($isInlineClass) { // it's a string of a classe
    $tmp = tmpfile();
    file_put_contents(stream_get_meta_data($tmp)['uri'], $line);
    $filePath = stream_get_meta_data($tmp)['uri'];
}

if ($isInlineClass === false) { // it's a file name
    $filePath = realpath($line);
    if ($filePath === false) {
        throw new \Exception('File not found');
    }
}

require $filePath;

$new = get_declared_classes();
$diff = array_diff($new, $old);

foreach ($diff as $className) {
    if ($className === BaseCrawler::class) {
        continue;
    }

    (new ProcessorPoolRequest(new $className))
        ->setDefaultLoggerLevel(\Monolog\Logger::INFO)
        ->run();
}
